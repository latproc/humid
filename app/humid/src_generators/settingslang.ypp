/*
	All rights reserved. Use of this source code is governed by the
	3-clause BSD License in LICENSE.txt.
*/
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <boost/foreach.hpp>
#include <lib_clockwork_client.hpp>

#define COMPILER_MAIN
#include "settingslang.h"

int st_yylex(void);

extern int st_yylineno;
extern int st_yycharno;
extern char *st_yytext;

int st_line_num = 1;   /* updated by the lexical analysis and used for error reporting */
extern int num_errors;
extern std::list<std::string>error_messages;
struct STParserState {
	Value current_value;
	SymbolTable properties;
	std::list<Parameter> current_parameters;
	std::list<std::string> current_name_list;
	std::list<SymbolTable> property_stack;
	Structure *current_machine;
} ;
STParserState sts;
static char *error_message_name = 0;
static char *timeout_message_name = 0;


%}

%define api.prefix {st_yy}

%token BEGINPROP ENDPROP PROPSEP COMMA GE LE LT GT NE AND OR BECOMES;
%token NOT UMINUS IFX IFELSE

%union {
	int iVal;
	const char *sVal;
	const char *symbol;
	const char *pVal;
	Value *val;
	Parameter *param;
};

%token <iVal> INTEGER
%token <iVal> ADDRESS
%token <symbol> SYMBOL
%token <sVal> STRINGVAL
%token <pVal> HUMID_PATTERN

%left BECOMES
%left OR
%left AND
%left GE LE EQ NE LT GT
%left '+' '-' '|'
%left '*' '/' '%' '&' '^'
%nonassoc NOT
%nonassoc UMINUS
%nonassoc '~'
%left IFX
%left IFELSE

%type <val> value
%type <param> parameter

%%

settings:
settings_section
| settings settings_section
;

settings_section:
| machine_instantiation
| error ';'
| error '}'
;


machine_instantiation:
instantiation ';'
{
	// std::cerr << std::setw(5) << st_yylineno << " " << "Instance of a machine:" << *sts.current_machine << "\n";
	st_structures.push_back(sts.current_machine);
	sts.current_machine = NULL;
}
;

instantiation:
SYMBOL SYMBOL parameters
{
	sts.current_machine = new Structure(nullptr, $1, $2);
	std::copy(sts.current_parameters.begin(), sts.current_parameters.end(),back_inserter(sts.current_machine->parameters));
	sts.current_parameters.clear();
	sts.current_machine->setDefinitionLocation(st_yyfilename, st_yylineno);
	sts.properties.clear();
}
| SYMBOL SYMBOL property_block parameters
{
	//deferred_instantiations.push_back(new MachineDetails($1, $2, sts.current_parameters.end,
	//__FILE__, __LINE__, sts.properties,
	//MachineInstance::MACHINE_INSTANCE));
	//sts.current_machine = 0;
	sts.current_machine = new Structure(nullptr, $1, $2);
	std::copy(sts.current_parameters.begin(), sts.current_parameters.end(),back_inserter(sts.current_machine->parameters));
	sts.current_parameters.clear();
	sts.current_machine->setDefinitionLocation(st_yyfilename, st_yylineno);
	sts.properties = sts.property_stack.back();
	sts.property_stack.pop_back();
	sts.current_machine->setProperties(sts.properties);
	sts.properties.clear();
}
;


parameters:
parameter
| parameters COMMA parameter
;

parameter:
value {
	sts.current_value = *$1;
	//std::cerr << std::setw(5) << st_yylineno << " "  << "Symbol, value: " << *$1 << "\n";
	sts.current_parameters.push_back(Parameter(*$1));
	$$ = new Parameter(*$1);
	delete $1;
}
| SYMBOL property_block {
	sts.current_value = $1;
	sts.properties = sts.property_stack.back();
	sts.property_stack.pop_back();
	//std::cerr << std::setw(5) << st_yylineno << " "  << "Symbol, value: " << $1 << '[' << sts.properties << "]\n";
	sts.current_parameters.push_back(Parameter($1, sts.properties));
	$$ = new Parameter($1, sts.properties);
	sts.properties.clear();
}
| {}
;

property_block:
'(' sts.properties ')'
{
	//std::cerr << "sts.properties " << sts.properties << "\n";
	sts.property_stack.push_back(sts.properties);
	sts.properties.clear();
}
;

sts.properties:
property
| sts.properties COMMA property
;

property:
SYMBOL PROPSEP value
{
	//std::cerr << "property: " << $1 << " = " << *$3 << "\n";
	sts.properties.add($1, *$3);
	delete $3;
}
| SYMBOL {
	//std::cerr << "property: " << $1 << " = 0\n";
	sts.properties.add($1, 0);
}
;

value:
INTEGER   {
	$$ = new Value($1);
}
| STRINGVAL {
	$$ = new Value($1, Value::t_string);
}
| SYMBOL {
	$$ = new Value($1);
}

%%
void st_yyerror(const char *str)
{
	std::stringstream ss;
	ss << "## - Error: " << st_yyfilename << ":" << st_yylineno << ": " << str << " at token: " << st_yytext;
	error_messages.push_back(ss.str());
	std::cerr << ss.str() << "\n";
	num_errors++;
}
