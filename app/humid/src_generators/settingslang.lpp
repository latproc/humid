/*
	All rights reserved. Use of this source code is governed by the
	3-clause BSD License in LICENSE.txt.
*/
%{
	#include <stdlib.h>
	#include "settingslang.h"
	#include "settingslang.tab.hpp"
    #if __cplusplus > 199711L
    #define register // Deprecated in C++11.
    #endif

	void st_yyerror(const char *);

	static char *st_buf;
	static int st_buflen = 0;
	static char *st_bufp;
	extern ST_YYSTYPE st_yylval;
	int st_yycharno;

	static void st_append_char(int ch);
%}

%option prefix="st_yy"

%x STRING
%x COMMENT
%x HASHCOMMENT
%x HUMID_PATTERNSTR

%%

\n              { st_yylineno++; st_yycharno = 1; }

[A-Za-z][A-Za-z0-9_.]*       {
	st_yylval.sVal = strdup(st_yytext);
	return SYMBOL;
}

"0x"[0-9a-fA-F][0-9a-fA-F]*	{
	long val;
	char *p;
	val = strtol(st_yytext, &p, 16);
	st_yylval.iVal = val;
	return INTEGER;
}

0           {
	st_yylval.iVal = atoi(st_yytext);
	return INTEGER;
}

[-]{0,1}[1-9][0-9]* {
	st_yylval.iVal = atoi(st_yytext);
	return INTEGER;
}

"/*"			BEGIN COMMENT;
<COMMENT>"*/"	BEGIN 0;
<COMMENT>\n		{st_yylineno++; st_yycharno=1; }
<COMMENT>.		;

"#"             BEGIN HASHCOMMENT;
<HASHCOMMENT>\n     { st_yylineno++; st_yycharno=1; BEGIN 0; }
<HASHCOMMENT>.		;

`               {
	BEGIN HUMID_PATTERNSTR;
	if (!st_buf)
	{
		st_buf = (char *)malloc(20);
		st_buflen = 20;
	}
	st_bufp = st_buf;
	*st_bufp = 0;
}
<HUMID_PATTERNSTR>\\`    { st_append_char('`'); }
<HUMID_PATTERNSTR>`      { BEGIN 0; st_yylval.sVal = st_buf; st_buf = NULL; return HUMID_PATTERN; }
<HUMID_PATTERNSTR>\\[0-3][0-7][0-7] { unsigned char ch = ((st_yytext[1]-'0')*8 + st_yytext[2]-'0')*8+st_yytext[3]-'0'; st_append_char(ch);  }
<HUMID_PATTERNSTR>\r		{ st_append_char('\r');  }
<HUMID_PATTERNSTR>\t		{ st_append_char('\t');}
<HUMID_PATTERNSTR>\n		{ st_append_char('\n'); st_yylineno++; st_yycharno=1; }
<HUMID_PATTERNSTR>.      { st_append_char( *st_yytext); }

\"			    {  /*"*/
BEGIN STRING;
if (!st_buf)
{
	st_buf = (char *)malloc(20);
	st_buflen = 20;
}
st_bufp = st_buf;
*st_bufp = 0;
}
<STRING>\\n		{ st_append_char('\n'); }
<STRING>\\r		{ st_append_char('\r'); }
<STRING>\\t		{ st_append_char('\t'); }
<STRING>\\[0-3][0-7][0-7] { unsigned char ch = ((st_yytext[1]-'0')*8 + st_yytext[2]-'0')*8+st_yytext[3]-'0'; st_append_char(ch); }
<STRING>\\\"	{ /*"*/ st_append_char('\"'); }
<STRING>\"		{ /*"*/ BEGIN 0; st_yylval.sVal = st_buf; st_buf = NULL; return STRINGVAL; }
<STRING>\n		{ st_append_char('\n'); st_yylineno++; st_yycharno=1; }
<STRING>.		{ st_append_char(*st_yytext); }

[-()=+*/;{}.%] {
	return *st_yytext;
}

"["             return BEGINPROP;
"]"             return ENDPROP;
":"             return PROPSEP;
","             return COMMA;
">="            return GE;
"<="            return LE;
"<"             return LT;
">"             return GT;
"=="            return EQ;
"!="            return NE;
"&&"            return AND;
"||"            return OR;
":="            return BECOMES;

"&"             return *st_yytext;
"|"             return *st_yytext;
"^"             return *st_yytext;
"!"             return *st_yytext;

[ \t]+        ;       /* ignore whitespace */

\'              /*' ignore single quotes */
.               { printf("found char %d (%c)\n", *st_yytext, *st_yytext); st_yyerror("Unknown character"); }

%%
int st_yywrap(void) {
	return 1;
}

static void st_append_char(int ch)
{
	if (st_bufp - st_buf == st_buflen-1) {
		st_buf = (char *)realloc(st_buf, st_buflen + 20);
		st_bufp = st_buf + st_buflen-1;
		st_buflen += 20;
	}
	*st_bufp++ = ch;
	*st_bufp = 0;
}
